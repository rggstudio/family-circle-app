---
description: Best practices to implement for the tech stack used
globs: 
---
Expo Best Practices:

Use Expo's managed workflow for easier app development and updates
Implement proper use of Expo APIs for native features
Utilize Expo's build service for consistent builds across platforms
Leverage Expo's OTA updates for seamless app updates

React Native Best Practices:

Use functional components with hooks for better code organization and reusability
Implement proper use of React.memo and useMemo for performance optimization
Follow React hooks rules strictly to avoid common pitfalls
Utilize React Native's built-in components for better performance and native look-and-feel
Implement proper error handling and crash reporting

Firebase Best Practices:

Use Firebase Authentication for secure user management
Implement proper Firebase security rules to protect your data
Utilize Firebase Cloud Functions for server-side logic and improved performance
Implement proper error handling and logging for Firebase operations
Use Firebase Performance Monitoring to identify and fix performance issues

React Navigation Best Practices:

Use the latest version of React Navigation for improved performance and features
Implement proper navigation structure for better app organization
Utilize navigation params efficiently to pass data between screens
Implement proper back button handling for Android devices
Use the navigation lifecycle methods correctly for managing screen state

React Native Gesture Handler Best Practices:

Use native gesture handlers for improved performance and smoother interactions
Implement proper hitSlop and pressRetentionOffset for better touch handling
Utilize the useAnimatedGestureHandler hook for complex gesture animations
Implement proper gesture prioritization to avoid conflicts between multiple gestures

React Native Reanimated Best Practices:

Use Reanimated for high-performance animations
Implement proper use of shared values for efficient state management
Utilize the useAnimatedStyle hook for optimized style animations
Implement proper cleanup of animations to prevent memory leaks
Use the runOnUI and runOnJS functions for improved performance in complex scenarios

React Native Safe Area Context Best Practices:

Use SafeAreaView to ensure proper layout on devices with notches or home indicators
Implement proper use of useSafeAreaInsets hook for custom layouts
Utilize the SafeAreaProvider at the root of your app for consistent behavior

React Native WebView Best Practices:

Use WebView for rendering web content within your app
Implement proper error handling and loading states for WebView
Utilize injectedJavaScript for improved performance and security
Implement proper navigation handling within WebView
Use WebView's onMessage prop for secure communication between native and web code

Expo Vector Icons Best Practices:

Use Expo Vector Icons for consistent icon rendering across platforms
Implement proper icon sizing and styling for better UI consistency
Utilize icon caching for improved performance
Implement proper accessibility labels for icons

General Standards:

Keep components small and focused for better maintainability
Follow proper state management patterns to avoid prop drilling and improve performance
Implement comprehensive testing practices, including unit tests and integration tests
Use TypeScript for improved type safety and code quality
Implement proper code splitting and lazy loading for better performance
Follow security best practices, including input validation and secure data storage